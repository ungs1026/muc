# Chart.js 라이브러리 문서

Chart.js는 HTML5 `<canvas>` 요소를 사용하여 유연하고 아름다운 반응형 차트를 만들 수 있는 JavaScript 라이브러리입니다. 8가지의 다양한 차트 유형을 제공하며, 완벽한 커스터마이징이 가능합니다.

---

## 1. Chart.js 적용 방법

Chart.js는 CDN을 통해 직접 HTML에 삽입하거나, npm/yarn 같은 패키지 매니저를 통해 프로젝트에 설치하여 사용할 수 있습니다.

### 1.1 CDN 적용 방법

CDN(Content Delivery Network)을 사용하면 별도의 설치 과정 없이 script태그 한 줄로 Chart.js를 사용할 수 있습니다. 간단한 웹 페이지나 빠른 프로토타이핑에 매우 유용합니다.

```html
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chart.js CDN 예시</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        .chart-container {
            width: 80%;
            max-width: 600px;
            margin: 50px auto;
        }
    </style>
</head>
<body>
    <div class="chart-container">
        <canvas id="myChart"></canvas>
    </div>
    <script>
        // 1. 캔버스 컨텍스트 가져오기
        const ctx = document.getElementById('myChart');
        // 2. new Chart()를 사용하여 차트 생성
        new Chart(ctx, {
            type: 'bar', // 차트 유형: 'bar', 'line', 'pie', 'doughnut' 등
            data: {
                labels: ['January', 'February', 'March', 'April', 'May', 'June'],
                datasets: [{
                    label: '# of Votes',
                    data: [12, 19, 3, 5, 2, 3],
                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    </script>
</body>
</html>
```

### 1.2 CLI (npm/yarn) 적용 방법

Vue, React 등 최신 JavaScript 프레임워크를 사용하는 프로젝트에서는 패키지 매니저로 Chart.js를 설치하고 모듈로 가져와 사용하는 것이 일반적입니다.

#### 1.2.1 설치

```bash
# npm 사용 시
npm install chart.js

# yarn 사용 시
yarn add chart.js
```

#### 1.2.2 프로젝트에서 사용

```javascript
import { Chart, registerables } from 'chart.js';
// Chart.js의 모든 구성 요소를 사용하기 위해 registerables를 등록합니다.
Chart.register(...registerables);
// 캔버스 요소 가져오기
const canvasElement = document.getElementById('my-chart-canvas');
// 차트 생성
const myChart = new Chart(canvasElement, {
    type: 'line',
    data: {
        labels: ['Day 1', 'Day 2', 'Day 3', 'Day 4'],
        datasets: [{
            label: 'Stock Price',
            data: [10, 25, 15, 30],
            fill: false,
            borderColor: 'rgb(75, 192, 192)',
            tension: 0.1
        }]
    },
    // options...
});
```

---

## 2. Chart.js의 핵심 개념 및 API

Chart.js의 모든 차트는 `new Chart()` 생성자를 통해 만들어집니다. 이 생성자는 2개의 인자, 즉 렌더링 컨텍스트와 설정 객체를 받습니다.

### 2.1 `new Chart(context, config)`

* **`context`**: 차트가 그려질 `<canvas>` 요소의 2D 렌더링 컨텍스트입니다. 일반적으로 `document.getElementById('myCanvas').getContext('2d')`를 통해 얻습니다.
* **`config`**: 차트의 모든 속성을 정의하는 객체입니다. `type`, `data`, `options`가 핵심 속성입니다.

#### 2.1.1 `config` 객체의 주요 속성

| 속성 (Property) | 타입 (Type) | 설명 |
| --- | --- | --- |
| --- | --- | --- |
| `type` | `String` | 생성할 차트의 유형을 지정합니다. (예: `'bar'`, `'line'`, `'pie'`, `'radar'`, `'polarArea'` 등) |
| `data` | `Object` | 차트에 표시될 데이터(레이블, 데이터셋 등)를 정의하는 객체입니다. |
| `options` | `Object` | 차트의 모양과 동작을 커스터마이징하는 옵션 객체입니다. (예: 축, 범례, 툴팁, 반응형 설정 등) |
| `plugins` | `Array` | 차트의 기능을 확장하는 플러그인 배열입니다. |

### 2.2 `data` 객체 상세

`data` 객체는 차트의 데이터를 담는 컨테이너 역할을 합니다.

| 속성 (Property) | 타입 (Type) | 설명 |
| --- | --- | --- |
| --- | --- | --- |
| `labels` | `Array<String>` | 데이터의 각 지점에 대한 레이블(이름) 배열입니다. X축에 표시됩니다. |
| `datasets` | `Array<Object>` | 차트에 표시할 데이터셋의 배열입니다. 각 객체는 하나의 데이터 그룹을 나타냅니다. |

#### 2.2.1 `datasets` 배열의 요소 (데이터셋 객체)

데이터셋 객체는 실제 데이터와 해당 데이터의 시각적 스타일을 정의합니다.

| 속성 (Property) | 타입 (Type) | 설명 |
| --- | --- | --- |
| --- | --- | --- |
| `label` | `String` | 이 데이터셋의 이름입니다. 범례(legend)와 툴팁에 표시됩니다. |
| `data` | `Array<Number>` | 실제 차트에 표시될 숫자 데이터 배열입니다. `labels` 배열과 길이가 같아야 합니다. |
| `backgroundColor` | `String`, `Array<String>` | 데이터 영역의 배경색입니다. 막대그래프의 막대 색상, 파이 차트의 조각 색상 등에 사용됩니다. |
| `borderColor` | `String`, `Array<String>` | 데이터 라인 또는 테두리의 색상입니다. |
| `borderWidth` | `Number` | 데이터 테두리의 두께 (px)입니다. |
| `fill` | `Boolean` | 선 그래프(line chart)에서 라인 아래 영역을 채울지 여부를 결정합니다. |
| `tension` | `Number` | 선 그래프에서 라인의 곡률을 조절합니다. (0은 직선) |

### 2.3 `options` 객체 상세

`options` 객체를 통해 차트의 거의 모든 부분을 세밀하게 제어할 수 있습니다.

```javascript
// options 객체 예시
options: {
  responsive: true, // 컨테이너 크기에 맞춰 차트 크기를 자동으로 조절
  maintainAspectRatio: false, // 반응형일 때 가로세로 비율을 유지하지 않음 (주로 높이 조절 시 필요)
  scales: { // 축에 대한 설정
    x: { // X축 설정
      display: true, // 축 표시 여부
      title: {
        display: true,
        text: 'Month' // 축 제목
      }
    },
    y: { // Y축 설정
      beginAtZero: true, // Y축의 시작점을 0으로 할지 여부
      title: {
        display: true,
        text: 'Value'
      }
    }
  },
  plugins: { // 플러그인 관련 설정
    legend: { // 범례 설정
      display: true,
      position: 'top', // 범례 위치 ('top', 'bottom', 'left', 'right')
    },
    tooltip: { // 마우스 호버 시 나타나는 툴팁 설정
      enabled: true,
    },
    title: { // 차트 제목 설정
      display: true,
      text: '월별 데이터 시각화',
      font: {
        size: 18
      }
    }
  }
}
```