# Typed.js 라이브러리 문서

Typed.js는 선택한 문자열을 타이핑하는 것처럼 보여주는 간단하고 강력한 JavaScript 라이브러리입니다. 동적인 타이핑 효과를 통해 웹사이트에 생동감을 더할 수 있습니다.

---

## 1. Typed.js 적용 방법

Typed.js는 CDN을 통해 간단하게 적용하거나, npm/yarn을 통해 프로젝트에 통합할 수 있습니다.

### 1.1 CDN 적용 방법

CDN을 사용하면 HTML 파일에 script 태그 하나만 추가하여 Typed.js를 즉시 사용할 수 있습니다. 간단한 페이지나 빠른 테스트에 적합합니다.

```html
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Typed.js CDN 예시</title>
    <script src="https://unpkg.com/typed.js@2.1.0/dist/typed.umd.js"></script>
    <style>
        .typing-container {
            font-size: 1.5rem;
            font-family: monospace;
        }
    </style>
</head>
<body>
    <h1>Typed.js 예시</h1>
    <div class="typing-container">
        <span id="typed-output"></span>
    </div>
    <script>
        // 옵션 객체 설정
        const options = {
            strings: [
                'First sentence.', 
                'Second sentence.',
                '안녕하세요, Typed.js 입니다.'
            ],
            typeSpeed: 50,  // 타이핑 속도
            backSpeed: 50,  // 백스페이스 속도
            loop: true      // 반복 여부
        };
        // Typed.js 인스턴스 생성
        const typed = new Typed('#typed-output', options);
    </script>
</body>
</html>
```

### 1.2 CLI (npm/yarn) 적용 방법

Vue, React와 같은 모던 JavaScript 프레임워크 환경에서는 패키지 매니저를 통해 설치하고 모듈로 가져와 사용하는 것이 표준적인 방법입니다.

#### 1.2.1 설치

```bash
# npm 사용 시
npm install typed.js

# yarn 사용 시
yarn add typed.js
```

#### 1.2.2 프로젝트에서 사용

```javascript
import Typed from 'typed.js';
// 옵션 객체
const options = {
  strings: [
    'Some strings...', 
    'Another string.'
  ],
  typeSpeed: 40,
  backSpeed: 40,
};
// DOM 요소가 마운트된 후 실행
// document.addEventListener('DOMContentLoaded', () => {
//   const typed = new Typed('.my-element', options);
// });
```

---

## 2. Typed.js의 핵심 개념 및 API

Typed.js는 `new Typed()` 생성자를 통해 인스턴스를 만들고, 옵션 객체를 전달하여 동작을 제어합니다.

### 2.1 `new Typed(element, options)`

* **`element`**: 타이핑 효과를 적용할 HTML 요소의 CSS 선택자(예: `'#my-id'`) 또는 DOM 요소를 전달합니다.
* **`options`**: 타이핑 애니메이션의 동작을 상세하게 설정하는 객체입니다.

### 2.2 `options` 객체 상세

| 옵션 (Option) | 타입 (Type) | 기본값 (Default) | 설명 |
| --- | --- | --- | --- |
| --- | --- | --- | --- |
| `strings` | `Array<String>` | `[]` | 타이핑할 문자열의 배열입니다. HTML 태그를 포함할 수 있습니다. |
| `stringsElement` | `String` | `null` | `strings` 옵션 대신, 특정 HTML 요소 내부의 문자열을 가져와 타이핑할 때 해당 요소의 CSS 선택자를 지정합니다. |
| `typeSpeed` | `Number` | `0` | 타이핑 속도 (ms). 숫자가 클수록 느려집니다. |
| `backSpeed` | `Number` | `0` | 백스페이스(지우기) 속도 (ms). |
| `startDelay` | `Number` | `0` | 애니메이션 시작 전 딜레이 (ms). |
| `backDelay` | `Number` | `700` | 다음 문자열을 타이핑하기 전, 백스페이스 후 딜레이 (ms). |
| `loop` | `Boolean` | `false` | 애니메이션을 무한 반복할지 여부를 설정합니다. |
| `loopCount` | `Number` | `Infinity` | `loop: true`일 때, 반복할 횟수를 지정합니다. |
| `showCursor` | `Boolean` | `true` | 타이핑 커서를 표시할지 여부를 설정합니다. |
| `cursorChar` | `String` | `\` | 커서로 사용할 문자를 지정합니다. |
| `smartBackspace` | `Boolean` | `true` | `true`일 경우, 이전 문자열과 다음 문자열이 겹치는 부분까지는 지우지 않아 더 자연스러운 효과를 냅니다. |
| `shuffle` | `Boolean` | `false` | `strings` 배열의 순서를 무작위로 섞을지 여부를 설정합니다. |
| `fadeOut` | `Boolean` | `false` | 타이핑 대신 페이드 아웃 효과를 사용할지 설정합니다. |

---

## 3. 인스턴스 컨트롤 메서드

`new Typed()`로 생성된 인스턴스는 다음과 같은 메서드를 통해 제어할 수 있습니다. 이는 프리뷰 페이지의 '재생', '정지' 버튼 구현에 활용될 수 있습니다.

* **`typed.destroy()`**: Typed.js 인스턴스를 완전히 제거하고, 대상 요소를 원래 상태로 되돌립니다.
* **`typed.toggle()`**: 애니메이션을 일시 정지하거나 다시 시작합니다.
* **`typed.stop()`**: 애니메이션을 일시 정지합니다.
* **`typed.start()`"**: `stop()`으로 멈춘 애니메이션을 다시 시작합니다.
* **`typed.reset()`**: 애니메이션을 리셋하고 다시 시작합니다. `loop: true`인 경우에도 동작합니다.

#### 예시

```javascript
const typed = new Typed('#element', options);
// 1초 후 애니메이션 정지
setTimeout(() => {
    typed.stop();
}, 1000);
// 2초 후 애니메이션 다시 시작
setTimeout(() => {
    typed.start();
}, 2000);
```

---

## 4. 라이프사이클 콜백 함수

애니메이션의 특정 시점에 실행할 함수를 `options` 객체에 정의할 수 있습니다.

| 콜백 함수 | 설명 |
| --- | --- |
| `preStringTyped(arrayPos, self)` | 문자열이 타이핑되기 직전에 호출됩니다. |
| `onStringTyped(arrayPos, self)` | 문자열 하나가 타이핑된 직후에 호출됩니다. |
| `onLastStringBackspaced(self)` | 마지막 문자열의 백스페이스가 끝난 후 호출됩니다. |
| `onTypingPaused(arrayPos, self)` | `toggle()` 메서드로 애니메이션이 일시 정지되었을 때 호출됩니다. |
| `onTypingResumed(arrayPos, self)` | `toggle()` 메서드로 애니메이션이 재개되었을 때 호출됩니다. |
| `onReset(self)` | `reset()` 메서드가 호출되었을 때 실행됩니다. |
| `onComplete(self)` | 모든 문자열의 타이핑이 완료되었을 때 호출됩니다. (`loop: true`일 경우 호출되지 않음) |
| `onDestroy(self)` | `destroy()` 메서드가 호출되었을 때 실행됩니다. |